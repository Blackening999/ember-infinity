{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/components/infinity-loader.js","dummy/controllers/array.js","dummy/controllers/object.js","dummy/ember-infinity/tests/modules/ember-infinity/components/infinity-loader.jshint.js","dummy/ember-infinity/tests/modules/ember-infinity/mixins/route.jshint.js","dummy/initializers/app-version.js","dummy/initializers/ember-faker.js","dummy/initializers/export-application-global.js","dummy/models/post.js","dummy/router.js","dummy/routes/category.js","dummy/routes/demo.js","dummy/routes/home.js","dummy/templates/application.js","dummy/templates/category.js","dummy/templates/demo.js","dummy/templates/home.js","dummy/tests/acceptance/infinity-route-with-meta-test.js","dummy/tests/acceptance/infinity-route-with-meta-test.jshint.js","dummy/tests/acceptance/infinity-route-without-meta-test.js","dummy/tests/acceptance/infinity-route-without-meta-test.jshint.js","dummy/tests/app.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/models/post.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/category.jshint.js","dummy/tests/routes/demo.jshint.js","dummy/tests/routes/home.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/components/infinity-loader-test.js","dummy/tests/unit/components/infinity-loader-test.jshint.js","dummy/tests/unit/mixins/route-test.js","dummy/tests/unit/mixins/route-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/components/infinity-loader', ['exports', 'ember-infinity/components/infinity-loader'], function (exports, infinityLoader) {\n\n\t'use strict';\n\n\texports['default'] = infinityLoader['default'];\n\n});","define('dummy/controllers/array', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dummy/controllers/object', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dummy/ember-infinity/tests/modules/ember-infinity/components/infinity-loader.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - modules/ember-infinity/components');\n  test('modules/ember-infinity/components/infinity-loader.js should pass jshint', function () {\n    ok(true, 'modules/ember-infinity/components/infinity-loader.js should pass jshint.');\n  });\n\n});","define('dummy/ember-infinity/tests/modules/ember-infinity/mixins/route.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - modules/ember-infinity/mixins');\n  test('modules/ember-infinity/mixins/route.js should pass jshint', function () {\n    ok(true, 'modules/ember-infinity/mixins/route.js should pass jshint.');\n  });\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('dummy/initializers/ember-faker', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {}\n\n  ;\n\n  exports['default'] = {\n    name: 'ember-faker',\n    initialize: initialize\n  };\n  /* container, application */\n  // application.inject('route', 'foo', 'service:foo');\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('dummy/models/post', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr('string'),\n    category: DS['default'].attr('string')\n  });\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route('demo', { path: '/' });\n    this.route('home', { path: 'test' });\n    this.route('category', { path: '/category/:category' });\n  });\n\n  exports['default'] = Router;\n\n});","define('dummy/routes/category', ['exports', 'ember', 'ember-infinity/mixins/route'], function (exports, Ember, InfinityRoute) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend(InfinityRoute['default'], {\n    model: function model(params) {\n      return this.infinityModel('post', { category: params.category,\n        perPage: 2 });\n    }\n  });\n\n});","define('dummy/routes/demo', ['exports', 'ember', 'ember-infinity/mixins/route', 'pretender', 'faker'], function (exports, Ember, InfinityRoute, Pretender, faker) {\n\n  'use strict';\n\n  function generateFakeData(qty) {\n    var data = [];\n    for (var i = 0; i < qty; i++) {\n      data.push({ id: i, name: faker['default'].company.companyName() });\n    }\n    return data;\n  }\n\n  exports['default'] = Ember['default'].Route.extend(InfinityRoute['default'], {\n    init: function init() {\n      this._super.apply(this, arguments);\n      var fakeData = generateFakeData(104);\n      this.set('pretender', new Pretender['default']());\n      this.get('pretender').get('/posts', function (request) {\n        var queryParams = request.queryParams;\n        var fd = fakeData;\n        var page = parseInt(request.queryParams.page, 10);\n        var per = parseInt(request.queryParams.per_page, 10);\n        var payload = {\n          posts: fd.slice((page - 1) * per, Math.min(page * per, fd.length)),\n          meta: {\n            total_pages: Math.ceil(fd.length / per)\n          }\n        };\n        return [200, {}, JSON.stringify(payload)];\n      }, 500 /*ms*/);\n    },\n\n    tearDownPretender: Ember['default'].observer('deactivate', function () {\n      this.set('pretender', undefined);\n    }),\n\n    model: function model() {\n      return this.infinityModel('post');\n    }\n  });\n\n});","define('dummy/routes/home', ['exports', 'ember', 'ember-infinity/mixins/route'], function (exports, Ember, InfinityRoute) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend(InfinityRoute['default'], {\n    model: function model() {\n      return this.infinityModel('post');\n    }\n  });\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/category', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n          set(env, context, \"item\", blockArguments[0]);\n          content(env, morph0, context, \"item.name\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"posts-title\");\n        var el2 = dom.createTextNode(\"Listing Posts using Parameters\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"test-list\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2]),0,-1);\n        var morph1 = dom.createMorphAt(fragment,3,4,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"model\")], {}, child0, null);\n        inline(env, morph1, context, \"infinity-loader\", [], {\"infinityModel\": get(env, context, \"model\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/demo', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\". \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,-1,0);\n          var morph1 = dom.createMorphAt(element0,0,-1);\n          set(env, context, \"item\", blockArguments[0]);\n          content(env, morph0, context, \"item.id\");\n          content(env, morph1, context, \"item.name\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"demo-view\");\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"fixed-to-top jumbo-header text-center\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"https://github.com/hhff/ember-infinity\");\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"style\",\"position: absolute; top: 0; right: 0; border: 0;\");\n        dom.setAttribute(el3,\"src\",\"https://camo.githubusercontent.com/52760788cde945287fbb584134c4cbc2bc36f904/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f77686974655f6666666666662e706e67\");\n        dom.setAttribute(el3,\"alt\",\"Fork me on GitHub\");\n        dom.setAttribute(el3,\"data-canonical-src\",\"https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h2\");\n        dom.setAttribute(el2,\"id\",\"title\");\n        var el3 = dom.createTextNode(\"ember-infinity\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"demo-items\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [3]);\n        var morph0 = dom.createMorphAt(element1,0,1);\n        var morph1 = dom.createMorphAt(element1,1,2);\n        block(env, morph0, context, \"each\", [get(env, context, \"content\")], {}, child0, null);\n        inline(env, morph1, context, \"infinity-loader\", [], {\"infinityModel\": get(env, context, \"content\"), \"loadingText\": \"Loading more awesome records...\", \"loadedText\": \"Loaded all the records!\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/home', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n          set(env, context, \"post\", blockArguments[0]);\n          content(env, morph0, context, \"post.name\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"posts-title\");\n        var el2 = dom.createTextNode(\"Listing Posts\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"test-list\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2]),0,-1);\n        var morph1 = dom.createMorphAt(fragment,3,4,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"model\")], {}, child0, null);\n        inline(env, morph1, context, \"infinity-loader\", [], {\"infinityModel\": get(env, context, \"model\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/acceptance/infinity-route-with-meta-test', ['ember', 'qunit', 'dummy/tests/helpers/start-app', 'pretender'], function (Ember, qunit, startApp, Pretender) {\n\n  'use strict';\n\n  var App, server;\n\n  var posts = [{ id: 1, name: 'Squarepusher', category: 'a' }, { id: 2, name: 'Aphex Twin', category: 'b' }, { id: 3, name: 'Universal Indicator', category: 'a' }, { id: 4, name: 'Mike & Rich', category: 'b' }, { id: 5, name: 'Alroy Road Tracks', category: 'a' }, { id: 6, name: 'AFX', category: 'b' }];\n\n  qunit.module('Acceptance: Infinity Route', {\n    setup: function setup() {\n      App = startApp['default']();\n      server = new Pretender['default'](function () {\n        this.get('/posts', function (request) {\n          var body, subset, perPage, startPage, offset;\n\n          if (request.queryParams.category) {\n            subset = posts.filter(function (post) {\n              return post.category === request.queryParams.category;\n            });\n          } else {\n            subset = posts;\n          }\n          perPage = parseInt(request.queryParams.per_page, 10);\n          startPage = parseInt(request.queryParams.page, 10);\n\n          var pageCount = Math.ceil(subset.length / perPage);\n          offset = perPage * (startPage - 1);\n          subset = subset.slice(offset, offset + perPage);\n\n          body = { posts: subset, meta: { total_pages: pageCount } };\n\n          return [200, { 'Content-Type': 'application/json' }, JSON.stringify(body)];\n        });\n      });\n    },\n    teardown: function teardown() {\n      Ember['default'].run(App, 'destroy');\n      server.shutdown();\n    }\n  });\n\n  qunit.test('it works when meta is present in payload', function (assert) {\n    visit('/test');\n\n    andThen(function () {\n      var postsTitle = find('#posts-title');\n      var postList = find('ul');\n      var infinityLoader = find('.infinity-loader');\n\n      assert.equal(postsTitle.text(), 'Listing Posts');\n      assert.equal(postList.find('li').length, 6);\n      assert.equal(infinityLoader.hasClass('reached-infinity'), true);\n    });\n  });\n\n  qunit.test('it works with parameters', function (assert) {\n    visit('/category/a?per_page=2');\n\n    andThen(function () {\n      var postsTitle = find('#posts-title');\n      var postList = find('ul');\n      var infinityLoader = find('.infinity-loader');\n\n      assert.equal(postsTitle.text(), 'Listing Posts using Parameters', 'Post title text is correct');\n      assert.equal(postList.find('li').length, 2, 'Two items should be in the list');\n      assert.equal(postList.find('li:first-child').text(), 'Squarepusher', 'First item should be \\'Squarepusher\\'');\n      assert.equal(infinityLoader.hasClass('reached-infinity'), false, 'Infinity should not yet have been reached');\n    });\n  });\n\n});","define('dummy/tests/acceptance/infinity-route-with-meta-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - acceptance');\n  test('acceptance/infinity-route-with-meta-test.js should pass jshint', function() { \n    ok(true, 'acceptance/infinity-route-with-meta-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/acceptance/infinity-route-without-meta-test', ['ember', 'qunit', 'dummy/tests/helpers/start-app', 'pretender'], function (Ember, qunit, startApp, Pretender) {\n\n  'use strict';\n\n  var App, server;\n\n  qunit.module('Acceptance: Infinity Route', {\n    setup: function setup() {\n      App = startApp['default']();\n      server = new Pretender['default'](function () {\n        this.get('/posts', function (request) {\n          var posts = [{ id: 1, name: 'Squarepusher' }, { id: 2, name: 'Aphex Twin' }];\n          return [200, { 'Content-Type': 'application/json' }, JSON.stringify({ posts: posts })];\n        });\n      });\n    },\n    teardown: function teardown() {\n      Ember['default'].run(App, 'destroy');\n      server.shutdown();\n    }\n  });\n\n  qunit.test('it works when meta is not present in payload', function (assert) {\n    visit('/test');\n\n    andThen(function () {\n      var postsTitle = find('#posts-title');\n      var postList = find('ul');\n      var infinityLoader = find('.infinity-loader');\n\n      assert.equal(postsTitle.text(), 'Listing Posts');\n      assert.equal(postList.find('li').length, 2);\n      assert.equal(infinityLoader.hasClass('reached-infinity'), true);\n    });\n  });\n\n});","define('dummy/tests/acceptance/infinity-route-without-meta-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - acceptance');\n  test('acceptance/infinity-route-without-meta-test.js should pass jshint', function() { \n    ok(true, 'acceptance/infinity-route-without-meta-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/models/post.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/post.js should pass jshint', function() { \n    ok(true, 'models/post.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/category.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/category.js should pass jshint', function() { \n    ok(true, 'routes/category.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/demo.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/demo.js should pass jshint', function() { \n    ok(true, 'routes/demo.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/home.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/home.js should pass jshint', function() { \n    ok(true, 'routes/home.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/components/infinity-loader-test', ['ember-qunit', 'ember', 'jquery'], function (ember_qunit, Ember, $) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('infinity-loader');\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n  ember_qunit.test('it will not destroy on load unless set', function (assert) {\n    assert.expect(3);\n\n    var infinityModelStub = [{ id: 1, name: 'Tomato' }, { id: 2, name: 'Potato' }];\n\n    var component = this.subject();\n    component.set('infinityModel', infinityModelStub);\n    this.render();\n\n    assert.equal(component.get('destroyOnInfinity'), false);\n\n    Ember['default'].run(function () {\n      component.set('infinityModel.reachedInfinity', true);\n    });\n\n    assert.equal(component._state, 'inDOM');\n\n    Ember['default'].run(function () {\n      component.set('destroyOnInfinity', true);\n    });\n\n    assert.equal(component._state, 'destroying');\n  });\n\n  ember_qunit.test('it changes text property', function (assert) {\n    assert.expect(2);\n\n    var infinityModelStub = [{ id: 1, name: 'Tomato' }, { id: 2, name: 'Potato' }];\n\n    var componentText;\n    var component = this.subject();\n    component.set('infinityModel', infinityModelStub);\n    this.render();\n\n    componentText = $['default'].trim(component.$().text());\n    assert.equal(componentText, 'Loading Infinite Model...');\n\n    Ember['default'].run(function () {\n      component.set('infinityModel.reachedInfinity', true);\n    });\n\n    componentText = $['default'].trim(component.$().text());\n    assert.equal(componentText, 'Infinite Model Entirely Loaded.');\n  });\n\n  ember_qunit.test('it uses the window as the scrollable element', function (assert) {\n    assert.expect(1);\n    var component = this.subject();\n    this.render();\n    var scrollable = component.get('scrollable');\n    assert.equal(scrollable[0], window);\n  });\n\n  ember_qunit.test('it uses the provided scrollable element', function (assert) {\n    assert.expect(1);\n    $['default'](document.body).append('<div id=\\'content\\'/>');\n    var component = this.subject({ scrollable: '#content' });\n    this.render();\n    var scrollable = component.get('scrollable');\n    assert.equal(scrollable[0], $['default']('#content')[0]);\n  });\n\n  ember_qunit.test('it throws error when scrollable element is not found', function (assert) {\n    assert.expect(1);\n    var component = this.subject({ scrollable: '#notfound' });\n    assert.throws(function () {\n      this.render();\n    }, Error, 'Should raise error');\n  });\n\n  ember_qunit.test('it throws error when multiple scrollable elements are found', function (assert) {\n    assert.expect(1);\n    $['default'](document.body).append('<div/><div/>');\n    var component = this.subject({ scrollable: 'div' });\n    assert.throws(function () {\n      this.render();\n    }, Error, 'Should raise error');\n  });\n\n});","define('dummy/tests/unit/components/infinity-loader-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/infinity-loader-test.js should pass jshint', function() { \n    ok(true, 'unit/components/infinity-loader-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/mixins/route-test', ['ember', 'ember-infinity/mixins/route', 'qunit'], function (Ember, RouteMixin, qunit) {\n\n  'use strict';\n\n  qunit.module('RouteMixin');\n\n  qunit.test('it works', function (assert) {\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default']);\n    var route = RouteObject.create();\n    assert.ok(route);\n  });\n\n  qunit.test('it can not use infinityModel without Ember Data Store', function (assert) {\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default'], {\n      model: function model() {\n        return this.infinityModel('post');\n      }\n    });\n    var route = RouteObject.create();\n\n    var infinityError;\n    try {\n      route.model();\n    } catch (error) {\n      infinityError = error;\n    }\n\n    assert.ok(infinityError instanceof Error);\n    assert.equal(infinityError.message, 'Ember Data store is not available to infinityModel');\n  });\n\n  qunit.test('it can not use infinityModel without a Model Name', function (assert) {\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default'], {\n      model: function model() {\n        return this.infinityModel();\n      }\n    });\n    var route = RouteObject.create();\n    route.store = {\n      find: function find() {}\n    };\n\n    var infinityError;\n    try {\n      route.model();\n    } catch (error) {\n      infinityError = error;\n    }\n\n    assert.ok(infinityError instanceof Error);\n    assert.equal(infinityError.message, 'You must pass a Model Name to infinityModel');\n  });\n\n  qunit.test('it sets state before it reaches the end', function (assert) {\n\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default'], {\n      model: function model() {\n        return this.infinityModel('item');\n      }\n    });\n    var route = RouteObject.create();\n\n    var dummyStore = {\n      find: function find() {\n        var _this = this;\n\n        return new Ember['default'].RSVP.Promise(function (resolve) {\n          Ember['default'].run(_this, resolve, Ember['default'].Object.create({\n            items: [{ id: 1, name: 'Test' }],\n            meta: {\n              total_pages: 31\n            }\n          }));\n        });\n      }\n    };\n\n    route.store = dummyStore;\n\n    var model;\n    Ember['default'].run(function () {\n      route.model().then(function (result) {\n        model = result;\n      });\n    });\n\n    assert.equal(31, route.get('_totalPages'));\n    assert.equal(1, route.get('_currentPage'));\n    assert.equal(true, route.get('_canLoadMore'));\n    assert.ok(Ember['default'].$.isEmptyObject(route.get('_extraParams')));\n    assert.ok(!model.get('reachedInfinity'), 'Should not reach infinity');\n  });\n\n  qunit.test('it allows customizations of request params', function (assert) {\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default'], {\n      perPageParam: 'per',\n      pageParam: 'p',\n      model: function model() {\n        return this.infinityModel('item');\n      }\n    });\n    var route = RouteObject.create();\n\n    var dummyStore = {\n      find: function find(modelType, findQuery) {\n        var _this2 = this;\n\n        assert.deepEqual(findQuery, { per: 25, p: 1 });\n        return new Ember['default'].RSVP.Promise(function (resolve) {\n          Ember['default'].run(_this2, resolve, Ember['default'].Object.create({\n            items: []\n          }));\n        });\n      }\n    };\n\n    route.store = dummyStore;\n\n    var model;\n    Ember['default'].run(function () {\n      route.model().then(function (result) {\n        model = result;\n      });\n    });\n  });\n\n  qunit.test('it allows customizations of meta parsing params', function (assert) {\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default'], {\n      totalPagesParam: 'pagination.total',\n      model: function model() {\n        return this.infinityModel('item');\n      }\n    });\n    var route = RouteObject.create();\n\n    var dummyStore = {\n      find: function find(modelType, findQuery) {\n        var _this3 = this;\n\n        return new Ember['default'].RSVP.Promise(function (resolve) {\n          Ember['default'].run(_this3, resolve, Ember['default'].Object.create({\n            items: [{ id: 1, name: 'Walter White' }],\n            pagination: {\n              total: 22\n            }\n          }));\n        });\n      }\n    };\n\n    route.store = dummyStore;\n\n    var model;\n    Ember['default'].run(function () {\n      route.model().then(function (result) {\n        model = result;\n      });\n    });\n\n    assert.equal(22, route.get('_totalPages'));\n  });\n\n  qunit.test('it sets state  when it reaches the end', function (assert) {\n\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default'], {\n      model: function model() {\n        return this.infinityModel('item', { startingPage: 31 });\n      }\n    });\n    var route = RouteObject.create();\n\n    var dummyStore = {\n      find: function find() {\n        var _this4 = this;\n\n        return new Ember['default'].RSVP.Promise(function (resolve) {\n          Ember['default'].run(_this4, resolve, Ember['default'].Object.create({\n            items: [{ id: 1, name: 'Test' }],\n            meta: {\n              total_pages: 31\n            }\n          }));\n        });\n      }\n    };\n\n    route.store = dummyStore;\n\n    var model;\n    Ember['default'].run(function () {\n      route.model().then(function (result) {\n        model = result;\n      });\n    });\n\n    assert.equal(31, route.get('_totalPages'));\n    assert.equal(31, route.get('_currentPage'));\n    assert.ok(Ember['default'].$.isEmptyObject(route.get('_extraParams')));\n    assert.equal(false, route.get('_canLoadMore'));\n    assert.ok(model.get('reachedInfinity'), 'Should reach infinity');\n  });\n\n  qunit.test('it uses extra params when loading more data', function (assert) {\n\n    assert.expect(8);\n\n    var RouteObject = Ember['default'].Route.extend(RouteMixin['default'], {\n      model: function model() {\n        return this.infinityModel('item', { extra: 'param' });\n      }\n    });\n    var route = RouteObject.create();\n\n    var dummyStore = {\n      find: function find(name, params) {\n        var _this5 = this;\n\n        assert.equal('param', params.extra);\n        return new Ember['default'].RSVP.Promise(function (resolve) {\n          Ember['default'].run(_this5, resolve, Ember['default'].Object.create({\n            items: [{ id: 1, name: 'Test' }],\n            pushObjects: Ember['default'].K,\n            meta: {\n              total_pages: 2\n            }\n          }));\n        });\n      }\n    };\n\n    route.store = dummyStore;\n\n    var model;\n    Ember['default'].run(function () {\n      route.model().then(function (result) {\n        model = result;\n      });\n    });\n\n    // The controller needs to be set so _infinityLoad() can call\n    // pushObjects()\n    var dummyController = Ember['default'].Object.create({\n      model: model\n    });\n    route.set('controller', dummyController);\n\n    assert.equal('param', route.get('_extraParams.extra'));\n    assert.equal(true, route.get('_canLoadMore'));\n\n    // Load more\n    Ember['default'].run(function () {\n      route._infinityLoad();\n    });\n\n    assert.equal('param', route.get('_extraParams.extra'));\n    assert.equal(false, route.get('_canLoadMore'));\n    assert.equal(2, route.get('_currentPage'));\n    assert.ok(model.get('reachedInfinity'), 'Should reach infinity');\n  });\n\n});","define('dummy/tests/unit/mixins/route-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/route-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/route-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-infinity\",\"version\":\"0.0.7.297418bf\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrlrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}