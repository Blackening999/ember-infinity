{"version":3,"sources":["ember-cli-app-version.js","ember-cli-content-security-policy.js","ember-infinity.js","ember-infinity/components/infinity-loader.js","ember-infinity/mixins/route.js","ember-infinity/templates/components/infinity-loader.js"],"sourcesContent":["define(\"ember-cli-app-version\", [\"ember-cli-app-version/index\", \"ember\", \"exports\"], function(__index__, __Ember__, __exports__) {\n  \"use strict\";\n  __Ember__[\"default\"].keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define(\"ember-cli-content-security-policy\", [\"ember-cli-content-security-policy/index\", \"ember\", \"exports\"], function(__index__, __Ember__, __exports__) {\n  \"use strict\";\n  __Ember__[\"default\"].keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define(\"ember-infinity\", [\"ember-infinity/index\", \"ember\", \"exports\"], function(__index__, __Ember__, __exports__) {\n  \"use strict\";\n  __Ember__[\"default\"].keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-infinity/components/infinity-loader', ['exports', 'ember', 'ember-infinity/templates/components/infinity-loader'], function (exports, Ember, layout) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    layout: layout['default'],\n    classNames: ['infinity-loader'],\n    classNameBindings: ['infinityModel.reachedInfinity'],\n    guid: null,\n    scrollDebounce: 10,\n    loadMoreAction: 'infinityLoad',\n    loadingText: 'Loading Infinite Model...',\n    loadedText: 'Infinite Model Entirely Loaded.',\n    destroyOnInfinity: false,\n    developmentMode: false,\n    scrollable: null,\n\n    didInsertElement: function didInsertElement() {\n      this._super.apply(this, arguments);\n      this._setupScrollable();\n      this.set('guid', Ember['default'].guidFor(this));\n      this._bindScroll();\n      this._checkIfInView();\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      this._super.apply(this, arguments);\n      this._unbindScroll();\n    },\n\n    _bindScroll: function _bindScroll() {\n      var _this = this;\n\n      this.get('scrollable').on('scroll.' + this.get('guid'), function () {\n        Ember['default'].run.debounce(_this, _this._checkIfInView, _this.get('scrollDebounce'));\n      });\n    },\n\n    _unbindScroll: function _unbindScroll() {\n      this.get('scrollable').off('scroll.' + this.get('guid'));\n    },\n\n    _checkIfInView: function _checkIfInView() {\n      var selfOffset = this.$().offset().top;\n      var scrollable = this.get('scrollable');\n      var scrollableBottom = scrollable.height() + scrollable.scrollTop();\n\n      var inView = selfOffset < scrollableBottom;\n\n      if (inView && !this.get('developmentMode')) {\n        this.sendAction('loadMoreAction');\n      }\n    },\n\n    _setupScrollable: function _setupScrollable() {\n      var scrollable = this.get('scrollable');\n      if (Ember['default'].typeOf(scrollable) === 'string') {\n        var items = Ember['default'].$(scrollable);\n        if (items.length === 1) {\n          this.set('scrollable', items.eq(0));\n        } else if (items.length > 1) {\n          throw new Error('Multiple scrollable elements found for: ' + scrollable);\n        } else {\n          throw new Error('No scrollable element found for: ' + scrollable);\n        }\n      } else {\n        this.set('scrollable', Ember['default'].$(window));\n      }\n    },\n\n    loadedStatusDidChange: Ember['default'].observer('infinityModel.reachedInfinity', 'destroyOnInfinity', function () {\n      if (this.get('infinityModel.reachedInfinity') && this.get('destroyOnInfinity')) {\n        this.destroy();\n      }\n    })\n  });\n\n});","define('ember-infinity/mixins/route', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Mixin.create({\n\n    /**\n      @private\n      @property _perPage\n      @type Integer\n      @default 25\n    */\n    _perPage: 25,\n\n    /**\n      @private\n      @property _currentPage\n      @type Integer\n      @default 0\n    */\n    _currentPage: 0,\n\n    /**\n      @private\n      @property _extraParams\n      @type Object\n      @default {}\n    */\n    _extraParams: {},\n\n    /**\n      @private\n      @property _loadingMore\n      @type Boolean\n      @default false\n    */\n    _loadingMore: false,\n\n    /**\n      @private\n      @property _totalPages\n      @type Integer\n      @default 0\n    */\n    _totalPages: 0,\n\n    /**\n      @private\n      @property _infinityModelName\n      @type String\n      @default null\n    */\n    _infinityModelName: null,\n\n    /**\n      @private\n      @property _modelPath\n      @type String\n      @default 'controller.model'\n    */\n    _modelPath: 'controller.model',\n\n    /**\n     * Name of the \"per page\" param in the\n     * resource request payload\n     * @type {String}\n     * @default  \"per_page\"\n     */\n    perPageParam: 'per_page',\n\n    /**\n     * Name of the \"page\" param in the\n     * resource request payload\n     * @type {String}\n     * @default \"page\"\n     */\n    pageParam: 'page',\n\n    /**\n     * Path of the \"total pages\" param in\n     * the HTTP response\n     * @type {String}\n     * @default  \"meta.total_pages\"\n     */\n    totalPagesParam: 'meta.total_pages',\n\n    /**\n      @private\n      @property _canLoadMore\n      @type Boolean\n      @default false\n    */\n    _canLoadMore: Ember['default'].computed('_totalPages', '_currentPage', function () {\n      var totalPages = this.get('_totalPages');\n      var currentPage = this.get('_currentPage');\n      return totalPages && currentPage ? currentPage < totalPages : false;\n    }),\n\n    /**\n      Use the infinityModel method in the place of `this.store.find('model')` to\n      initialize the Infinity Model for your route.\n       @method infinityModel\n      @param {String} modelName The name of the model.\n      @param {Object} options Optional, the perPage and startingPage to load from.\n      @return {Ember.RSVP.Promise}\n    */\n    infinityModel: function infinityModel(modelName, options) {\n      var _this = this;\n\n      if (Ember['default'].isEmpty(this.store) || Ember['default'].isEmpty(this.store.find)) {\n        throw new Ember['default'].Error('Ember Data store is not available to infinityModel');\n      } else if (modelName === undefined) {\n        throw new Ember['default'].Error('You must pass a Model Name to infinityModel');\n      }\n\n      this.set('_infinityModelName', modelName);\n\n      options = options ? Ember['default'].merge({}, options) : {};\n      var startingPage = options.startingPage || 1;\n      var perPage = options.perPage || this.get('_perPage');\n      var modelPath = options.modelPath || this.get('_modelPath');\n\n      delete options.startingPage;\n      delete options.perPage;\n      delete options.modelPath;\n\n      this.set('_perPage', perPage);\n      this.set('_modelPath', modelPath);\n      this.set('_extraParams', options);\n\n      var requestPayloadBase = {};\n      requestPayloadBase[this.get('perPageParam')] = perPage;\n      requestPayloadBase[this.get('pageParam')] = startingPage;\n\n      var params = Ember['default'].merge(requestPayloadBase, options);\n      var promise = this.store.find(modelName, params);\n\n      promise.then(function (infinityModel) {\n        var totalPages = infinityModel.get(_this.get('totalPagesParam'));\n        _this.set('_currentPage', startingPage);\n        _this.set('_totalPages', totalPages);\n        infinityModel.set('reachedInfinity', !_this.get('_canLoadMore'));\n        Ember['default'].run.scheduleOnce('afterRender', _this, 'infinityModelUpdated', {\n          lastPageLoaded: startingPage,\n          totalPages: totalPages,\n          newObjects: infinityModel\n        });\n      }, function () {\n        throw new Ember['default'].Error('Could not fetch Infinity Model. Please check your serverside configuration.');\n      });\n\n      return promise;\n    },\n\n    /**\n     Trigger a load of the next page of results.\n      @method infinityLoad\n     @return {Boolean}\n     */\n    _infinityLoad: function _infinityLoad() {\n      var _this2 = this;\n\n      var nextPage = this.get('_currentPage') + 1;\n      var perPage = this.get('_perPage');\n      var totalPages = this.get('_totalPages');\n      var model = this.get(this.get('_modelPath'));\n      var modelName = this.get('_infinityModelName');\n\n      if (!this.get('_loadingMore') && this.get('_canLoadMore')) {\n        this.set('_loadingMore', true);\n\n        var params = Ember['default'].merge({ page: nextPage, per_page: perPage }, this.get('_extraParams'));\n        var promise = this.store.find(modelName, params);\n\n        promise.then(function (infinityModel) {\n          model.pushObjects(infinityModel.get('content'));\n          _this2.set('_loadingMore', false);\n          _this2.set('_currentPage', nextPage);\n          Ember['default'].run.scheduleOnce('afterRender', _this2, 'infinityModelUpdated', {\n            lastPageLoaded: nextPage,\n            totalPages: totalPages,\n            newObjects: infinityModel\n          });\n          if (!_this2.get('_canLoadMore')) {\n            _this2.set(_this2.get('_modelPath') + '.reachedInfinity', true);\n            Ember['default'].run.scheduleOnce('afterRender', _this2, 'infinityModelLoaded', {\n              totalPages: totalPages\n            });\n          }\n        }, function () {\n          _this2.set('_loadingMore', false);\n          throw new Ember['default'].Error('You must pass a Model Name to infinityModel');\n        });\n      } else {\n        if (!this.get('_canLoadMore')) {\n          this.set(this.get('_modelPath') + '.reachedInfinity', true);\n          Ember['default'].run.scheduleOnce('afterRender', this, 'infinityModelLoaded', { totalPages: totalPages });\n        }\n      }\n      return false;\n    },\n\n    actions: {\n      infinityLoad: function infinityLoad() {\n        this._infinityLoad();\n      }\n    }\n  });\n\n});","define('ember-infinity/templates/components/infinity-loader', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n          content(env, morph0, context, \"loadedText\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n          content(env, morph0, context, \"loadingText\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"if\", [get(env, context, \"infinityModel.reachedInfinity\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});"],"names":[],"mappingshfile":"addons.js"}